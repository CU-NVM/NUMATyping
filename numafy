#!/usr/bin/env bash
# filepath: /home/kidus/NUMATyping/numa-clang-tool/numafy
set -euo pipefail

# ============================================================================
# Help Function
# ============================================================================

show_help() {
    cat << EOF
NUMA-aware C++ Transformation Tool
Author: Kidus Workneh

USAGE:
    ./numafy [SUITE] [CLANG_VERSION] [OPTIONS]
    ./numafy --help

DESCRIPTION:
    Automatically transforms C++ code to use NUMA-aware memory allocation
    patterns. The tool performs two-pass transformation: first generating
    NUMA specializations, then casting regular allocations to NUMA versions.

ARGUMENTS:
    SUITE           Target test suite to transform (default: Histogram)
                    Available options: Histogram, DataStructureTests
    CLANG_VERSION   Clang version to use (default: 20)

ENVIRONMENT VARIABLES:
    UMF=<0|1>       Enable/disable Unified Memory Framework support (default: 1)
    DEBUG=<0|1>     Enable/disable debug mode with GDB (default: 0)

EXAMPLES:
    # Transform Histogram suite with default settings
    ./numafy

    # Transform DataStructureTests with Clang 18
    ./numafy DataStructureTests 18

    # Run with debug mode enabled
    DEBUG=1 ./numafy Histogram

    # Disable UMF support
    UMF=0 ./numafy DataStructureTests

    # Show this help message
    ./numafy --help

WORKFLOW:
    1. Copies input files to working directories
    2. Runs 'recurse' pass to generate NUMA class specializations
    3. Runs 'cast' pass to transform regular allocations to NUMA versions
    4. Outputs final transformed code to ../Output/[SUITE]

OUTPUT:
    Transformed code will be available in: ../Output/[SUITE]/

EOF
}

# ============================================================================
# Argument Processing
# ============================================================================

# Check for help flag
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    show_help
    exit 0
fi

# Default parameters
SUITE="${1:-Histogram}"
CLANG_VER="${2:-20}"
UMF="${UMF:-1}"
DEBUG="${DEBUG:-0}"

ROOT_DIR=$HOME/NUMATyping

# ============================================================================
# Directory Setup
# ============================================================================

rm -rf $ROOT_DIR/numa-clang-tool/input/$SUITE
cp -rf $ROOT_DIR/$SUITE $ROOT_DIR/numa-clang-tool/input/$SUITE
rm -rf $ROOT_DIR/numa-clang-tool/output/$SUITE
cp -rf $ROOT_DIR/numa-clang-tool/../$SUITE $ROOT_DIR/numa-clang-tool/output/$SUITE
rm -rf $ROOT_DIR/numa-clang-tool/output2/$SUITE
cp -rf $ROOT_DIR/numa-clang-tool/../$SUITE $ROOT_DIR/numa-clang-tool/output2/$SUITE

# ============================================================================
# UMF Configuration
# ============================================================================

UMF_INC_DIRS=""
UMF_LINK_FLAGS=""

if [[ "$UMF" == "1" ]]; then
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src/utils"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/include"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/examples/common"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src/ravl"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src/critnib"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src/provider"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src/memspaces"
  UMF_INC_DIRS+=" -I$ROOT_DIR/unified-memory-framework/src/memtargets"
  UMF_INC_DIRS+=" -DUMF"

  UMF_LINK_FLAGS+=" -lhwloc -lrt -ldl -ljemalloc"
  UMF_LINK_FLAGS+=" $ROOT_DIR/unified-memory-framework/build/lib/libumf.a"
  UMF_LINK_FLAGS+=" $ROOT_DIR/unified-memory-framework/build/lib/libjemalloc_pool.a"
  UMF_LINK_FLAGS+=" -DUMF"
fi

# ============================================================================
# Suite-Specific Transformations
# ============================================================================

# Histogram suite transformation
if [ "$SUITE" == "Histogram" ]; then
  if [ "$DEBUG" == "1" ]; then
    gdb --args $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=recurse --input=$ROOT_DIR/numa-clang-tool/input/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/input/$SUITE/src/Histogram.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/input/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/input/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
    rm -rf $ROOT_DIR/numa-clang-tool/output2/$SUITE
    gdb --args cp -rf $ROOT_DIR/numa-clang-tool/output/$SUITE $ROOT_DIR/numa-clang-tool/output2/$SUITE
    $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=cast --input=$ROOT_DIR/numa-clang-tool/output/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/output/$SUITE/src/Histogram.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/output/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/output/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
  else
    $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=recurse --input=$ROOT_DIR/numa-clang-tool/input/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/input/$SUITE/src/Histogram.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/input/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/input/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
    rm -rf $ROOT_DIR/numa-clang-tool/output2/$SUITE
    cp -rf $ROOT_DIR/numa-clang-tool/output/$SUITE $ROOT_DIR/numa-clang-tool/output2/$SUITE
    $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=cast --input=$ROOT_DIR/numa-clang-tool/output/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/output/$SUITE/src/Histogram.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/output/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/output/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
  fi
fi

# DataStructureTests suite transformation
if [ "$SUITE" == "DataStructureTests" ]; then
  if [ "$DEBUG" == "1" ]; then
    gdb --args $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=recurse --input=$ROOT_DIR/numa-clang-tool/input/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/input/$SUITE/src/TestSuite.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/input/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/input/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
    rm -rf $ROOT_DIR/numa-clang-tool/output2/$SUITE
    cp -rf $ROOT_DIR/numa-clang-tool/output/$SUITE $ROOT_DIR/numa-clang-tool/output2/$SUITE
    gdb --args $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=cast --input=$ROOT_DIR/numa-clang-tool/output/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/output/$SUITE/src/TestSuite.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/output/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/output/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
  else
    $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=recurse --input=$ROOT_DIR/numa-clang-tool/input/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/input/$SUITE/src/TestSuite.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/input/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/input/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
    rm -rf $ROOT_DIR/numa-clang-tool/output2/$SUITE
    cp -rf $ROOT_DIR/numa-clang-tool/output/$SUITE $ROOT_DIR/numa-clang-tool/output2/$SUITE
    $ROOT_DIR/numa-clang-tool/build/bin/clang-tool  --pass=cast --input=$ROOT_DIR/numa-clang-tool/output/$SUITE/src/main.cpp,$ROOT_DIR/numa-clang-tool/output/$SUITE/src/TestSuite.cpp dummy.cpp -- -I $ROOT_DIR/numa-clang-tool/output/$SUITE/include/ -I $ROOT_DIR/numa-clang-tool/output/$SUITE/util/ -I$ROOT_DIR/numaLib/ -I/usr/local/lib/clang/$CLANG_VER/include/ -lnuma -pthread $UMF_INC_DIRS  $UMF_LINK_FLAGS
  fi
fi

# ============================================================================
# Final Output
# ============================================================================

rm -rf $ROOT_DIR/Output/$SUITE
cp -rf $ROOT_DIR/numa-clang-tool/output2/$SUITE $ROOT_DIR/Output
echo "Final transformed code is available in: $ROOT_DIR/Output/$SUITE"